{"version":3,"file":"static/js/410.8ad6e376.chunk.js","mappings":"kMAKA,MAuVA,EAvVoBA,IAAmB,IAAlB,SAAEC,GAAUD,EAC/B,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAAC,IACzCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,YAClCK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,SAClCO,EAAQC,IAAaR,EAAAA,EAAAA,UAASS,EAAAA,EAAOC,IAAIC,SAE1CC,EAAUC,MAAOC,EAAUC,KAC/BhB,EAAeiB,IAAI,IACdA,EACH,CAACF,GAAW,CAAEG,OAAQ,UAAWC,KAAM,KAAMC,MAAO,SAGtD,IACE,MAAMC,QAAeL,IAKrB,OAJAhB,EAAeiB,IAAI,IACdA,EACH,CAACF,GAAW,CAAEG,OAAQ,UAAWC,KAAME,EAAQD,MAAO,UAEjD,CACT,CAAE,MAAOA,GAKP,OAJApB,EAAeiB,IAAI,IACdA,EACH,CAACF,GAAW,CAAEG,OAAQ,QAASC,KAAM,KAAMC,MAAOA,EAAME,gBAEnD,CACT,GAGIC,EAAYT,SACTU,EAAAA,EAAMC,KAAK,GAAGjB,eAAqB,CACxCJ,WACAE,aAIEoB,EAAeZ,SACZU,EAAAA,EAAMG,IAAI,GAAGnB,WAGhBoB,EAAiBd,SACdU,EAAAA,EAAMC,KAAK,GAAGjB,UAAgB,CACnCqB,cAAe,cACfC,YAAa,eACbC,MAAO,mBACPC,MAAO,iBACPC,SAAU,aACVC,WAAY,WACZC,eAAgB,IAChBjB,OAAQ,MACRkB,SAAU,WA6BRC,EAAY,CAChBC,WAAYxC,EAAW,UAAY,QACnCyC,aAAc,OACdC,UAAW,+BACXC,OAAQ,cAAa3C,EAAW,UAAY,WAC5C4C,QAAS,SACTC,aAAc,UAGVC,EAAa,CACjBC,MAAO,OACPH,QAAS,UACTD,OAAQ,cAAa3C,EAAW,UAAY,WAC5CyC,aAAc,MACdD,WAAYxC,EAAW,UAAY,QACnCgD,MAAOhD,EAAW,QAAU,UAC5BiD,SAAU,OACVJ,aAAc,QAGVK,EAAc,CAClBN,QAAS,iBACTJ,WAAYpC,EAAY,UAAY,4CACpC4C,MAAO,QACPL,OAAQ,OACRF,aAAc,MACdU,OAAQ/C,EAAY,cAAgB,UACpC6C,SAAU,OACVG,WAAY,OAGRC,EAAkBjC,IACtB,MAAMkC,EAAS,CACbC,QAAS,CAAEC,GAAI,UAAWC,KAAM,WAChCC,QAAS,CAAEF,GAAI,UAAWC,KAAM,WAChCnC,MAAO,CAAEkC,GAAI,UAAWC,KAAM,YAG1BE,EAAQL,EAAOlC,IAAWkC,EAAOC,QAEvC,OACEK,EAAAA,EAAAA,KAAA,QAAMD,MAAO,CACXf,QAAS,kBACTH,aAAc,OACdQ,SAAU,UACVG,WAAY,MACZZ,WAAYmB,EAAMH,GAClBR,MAAOW,EAAMF,MACbI,SACY,YAAXzC,EAAuB,aACZ,YAAXA,EAAuB,UAAY,WAK1C,OACE0C,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAID,MAAO,CACTV,SAAU,OACVG,WAAY,MACZJ,MAAOhD,EAAW,QAAU,UAC5B6C,aAAc,UACdgB,SAAC,yBAKHC,EAAAA,EAAAA,MAAA,OAAKH,MAAOpB,EAAUsB,SAAA,EACpBD,EAAAA,EAAAA,KAAA,MAAID,MAAO,CACTV,SAAU,UACVG,WAAY,MACZJ,MAAOhD,EAAW,QAAU,UAC5B6C,aAAc,QACdgB,SAAC,uBAIHC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAOD,MAAO,CACZI,QAAS,QACTd,SAAU,WACVG,WAAY,MACZJ,MAAOhD,EAAW,UAAY,UAC9B6C,aAAc,UACdgB,SAAC,aAGHD,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,MAAOvD,EACPwD,SAAWC,GAAMxD,EAAUwD,EAAEC,OAAOH,OACpCN,MAAOb,QAIXgB,EAAAA,EAAAA,MAAA,OAAKH,MAAO,CAAEI,QAAS,OAAQM,oBAAqB,UAAWC,IAAK,QAAST,SAAA,EAC3EC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAOD,MAAO,CACZI,QAAS,QACTd,SAAU,WACVG,WAAY,MACZJ,MAAOhD,EAAW,UAAY,UAC9B6C,aAAc,UACdgB,SAAC,cAGHD,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,MAAO3D,EACP4D,SAAWC,GAAM5D,EAAY4D,EAAEC,OAAOH,OACtCN,MAAOb,QAGXgB,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAOD,MAAO,CACZI,QAAS,QACTd,SAAU,WACVG,WAAY,MACZJ,MAAOhD,EAAW,UAAY,UAC9B6C,aAAc,UACdgB,SAAC,cAGHD,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLC,MAAOzD,EACP0D,SAAWC,GAAM1D,EAAY0D,EAAEC,OAAOH,OACtCN,MAAOb,WAKbc,EAAAA,EAAAA,KAAA,UACEW,QA9JYvD,UAClBX,GAAa,GAEb,UAE6BU,EAAQ,QAASU,UAIpC+C,QAAQC,IAAI,CAChB1D,EAAQ,WAAYa,GACpBb,EAAQ,aAAce,MAExB4C,EAAAA,EAAAA,GAAU,UAAW,gCAErBA,EAAAA,EAAAA,GAAU,QAAS,iDAEvB,CAAE,MAAOpD,GACPqD,QAAQrD,MAAM,uBAAwBA,IACtCoD,EAAAA,EAAAA,GAAU,QAAS,6BACrB,CAAC,QACCrE,GAAa,EACf,GAyIMuE,SAAUxE,EACVuD,MAAOT,EAAYW,SAElBzD,EAAY,mBAAqB,sBAKtC0D,EAAAA,EAAAA,MAAA,OAAKH,MAAOpB,EAAUsB,SAAA,EACpBD,EAAAA,EAAAA,KAAA,MAAID,MAAO,CACTV,SAAU,UACVG,WAAY,MACZJ,MAAOhD,EAAW,QAAU,UAC5B6C,aAAc,QACdgB,SAAC,iBAIkC,IAApCgB,OAAOC,KAAK7E,GAAa8E,QACxBnB,EAAAA,EAAAA,KAAA,KAAGD,MAAO,CAAEX,MAAOhD,EAAW,UAAY,WAAY6D,SAAC,uDAIvDD,EAAAA,EAAAA,KAAA,OAAKD,MAAO,CAAEI,QAAS,OAAQiB,cAAe,SAAUV,IAAK,QAAST,SACnEgB,OAAOI,QAAQhF,GAAaiF,IAAIC,IAAA,IAAAC,EAAA,IAAEnE,EAAUM,GAAO4D,EAAA,OAClDrB,EAAAA,EAAAA,MAAA,OAAoBH,MAAO,CACzBf,QAAS,OACTJ,WAAYxC,EAAW,UAAY,UACnCyC,aAAc,MACdE,OAAQ,cAAa3C,EAAW,UAAY,YAC5C6D,SAAA,EACAC,EAAAA,EAAAA,MAAA,OAAKH,MAAO,CACVI,QAAS,OACTsB,eAAgB,gBAChBC,WAAY,SACZzC,aAAc,UACdgB,SAAA,EACAC,EAAAA,EAAAA,MAAA,MAAIH,MAAO,CACTV,SAAU,OACVG,WAAY,MACZJ,MAAOhD,EAAW,QAAU,UAC5BuF,OAAQ,EACRC,cAAe,cACf3B,SAAA,CACC5C,EAAS,WAEXoC,EAAe9B,EAAOH,WAGN,YAAlBG,EAAOH,SACNwC,EAAAA,EAAAA,KAAA,OAAKD,MAAO,CACVnB,WAAYxC,EAAW,UAAY,QACnC4C,QAAS,UACTH,aAAc,MACdQ,SAAU,WACVD,MAAOhD,EAAW,UAAY,UAC9ByF,WAAY,YACZC,UAAW,QACX7B,UACAD,EAAAA,EAAAA,KAAA,OAAKD,MAAO,CAAE4B,OAAQ,GAAI1B,SACvB8B,KAAKC,WAAqB,QAAXR,EAAA7D,EAAOF,YAAI,IAAA+D,OAAA,EAAXA,EAAa/D,OAAQE,EAAOF,KAAM,KAAM,OAK3C,UAAlBE,EAAOH,SACNwC,EAAAA,EAAAA,KAAA,OAAKD,MAAO,CACVnB,WAAY,YACZI,QAAS,UACTH,aAAc,MACdQ,SAAU,WACVD,MAAO,UACPyC,WAAY,aACZ5B,SACCtC,EAAOD,UAjDJL,WA2DlB6C,EAAAA,EAAAA,MAAA,OAAKH,MAAOpB,EAAUsB,SAAA,EACpBD,EAAAA,EAAAA,KAAA,MAAID,MAAO,CACTV,SAAU,UACVG,WAAY,MACZJ,MAAOhD,EAAW,QAAU,UAC5B6C,aAAc,QACdgB,SAAC,0BAIHC,EAAAA,EAAAA,MAAA,OAAKH,MAAO,CACVnB,WAAYxC,EAAW,UAAY,UACnC4C,QAAS,OACTH,aAAc,MACdQ,SAAU,WACVD,MAAOhD,EAAW,UAAY,UAC9ByF,WAAY,YACZ5C,aAAc,QACdgB,SAAA,EACAD,EAAAA,EAAAA,KAAA,KAAGD,MAAO,CAAE4B,OAAQ,gBAAiB1B,SAAC,oCACtCD,EAAAA,EAAAA,KAAA,OAAKD,MAAO,CAAE4B,OAAQ,EAAGG,UAAW,QAAS7B,SACtD,+VAiBOD,EAAAA,EAAAA,KAAA,KAAGD,MAAO,CAAEX,MAAOhD,EAAW,UAAY,UAAWiD,SAAU,YAAaY,SAAC,wH","sources":["components/ApiTestPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { showToast } from './ToastNotification';\nimport config from '../config';\n\nconst ApiTestPage = ({ darkMode }) => {\n  const [testResults, setTestResults] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [username, setUsername] = useState('navneet');\n  const [password, setPassword] = useState('1234');\n  const [apiUrl, setApiUrl] = useState(config.api.baseUrl);\n\n  const runTest = async (testName, testFunction) => {\n    setTestResults(prev => ({\n      ...prev,\n      [testName]: { status: 'running', data: null, error: null }\n    }));\n    \n    try {\n      const result = await testFunction();\n      setTestResults(prev => ({\n        ...prev,\n        [testName]: { status: 'success', data: result, error: null }\n      }));\n      return true;\n    } catch (error) {\n      setTestResults(prev => ({\n        ...prev,\n        [testName]: { status: 'error', data: null, error: error.toString() }\n      }));\n      return false;\n    }\n  };\n\n  const testLogin = async () => {\n    return axios.post(`${apiUrl}/auth/login`, {\n      username,\n      password\n    });\n  };\n\n  const testGetLeads = async () => {\n    return axios.get(`${apiUrl}/leads`);\n  };\n\n  const testCreateLead = async () => {\n    return axios.post(`${apiUrl}/leads`, {\n      contactPerson: 'Test Person',\n      companyName: 'Test Company',\n      email: 'test@example.com',\n      phone: '+91 9876543210',\n      industry: 'Technology',\n      leadSource: 'API Test',\n      estimatedValue: 100000,\n      status: 'new',\n      priority: 'medium'\n    });\n  };\n\n  const runAllTests = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Test login first\n      const loginSuccess = await runTest('login', testLogin);\n      \n      if (loginSuccess) {\n        // If login succeeds, run other tests\n        await Promise.all([\n          runTest('getLeads', testGetLeads),\n          runTest('createLead', testCreateLead)\n        ]);\n        showToast('success', '✅ API tests completed');\n      } else {\n        showToast('error', '❌ Login test failed, skipping other tests');\n      }\n    } catch (error) {\n      console.error('Error running tests:', error);\n      showToast('error', '❌ Error running tests');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const cardStyle = {\n    background: darkMode ? '#1f2937' : 'white',\n    borderRadius: '16px',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    border: `1px solid ${darkMode ? '#374151' : '#e5e7eb'}`,\n    padding: '1.5rem',\n    marginBottom: '1.5rem'\n  };\n\n  const inputStyle = {\n    width: '100%',\n    padding: '0.75rem',\n    border: `2px solid ${darkMode ? '#374151' : '#e5e7eb'}`,\n    borderRadius: '8px',\n    background: darkMode ? '#374151' : 'white',\n    color: darkMode ? 'white' : '#1f2937',\n    fontSize: '1rem',\n    marginBottom: '1rem'\n  };\n\n  const buttonStyle = {\n    padding: '0.75rem 1.5rem',\n    background: isLoading ? '#9ca3af' : 'linear-gradient(135deg, #3b82f6, #60a5fa)',\n    color: 'white',\n    border: 'none',\n    borderRadius: '8px',\n    cursor: isLoading ? 'not-allowed' : 'pointer',\n    fontSize: '1rem',\n    fontWeight: '600'\n  };\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      running: { bg: '#fef3c7', text: '#d97706' },\n      success: { bg: '#dcfce7', text: '#16a34a' },\n      error: { bg: '#fee2e2', text: '#dc2626' }\n    };\n    \n    const style = styles[status] || styles.running;\n    \n    return (\n      <span style={{\n        padding: '0.25rem 0.75rem',\n        borderRadius: '20px',\n        fontSize: '0.75rem',\n        fontWeight: '600',\n        background: style.bg,\n        color: style.text\n      }}>\n        {status === 'running' ? 'Running...' : \n         status === 'success' ? 'Success' : 'Error'}\n      </span>\n    );\n  };\n\n  return (\n    <div>\n      <h1 style={{\n        fontSize: '2rem',\n        fontWeight: '700',\n        color: darkMode ? 'white' : '#1f2937',\n        marginBottom: '1.5rem'\n      }}>\n        API End-to-End Test\n      </h1>\n\n      {/* Configuration */}\n      <div style={cardStyle}>\n        <h2 style={{\n          fontSize: '1.25rem',\n          fontWeight: '600',\n          color: darkMode ? 'white' : '#1f2937',\n          marginBottom: '1rem'\n        }}>\n          API Configuration\n        </h2>\n        \n        <div>\n          <label style={{\n            display: 'block',\n            fontSize: '0.875rem',\n            fontWeight: '600',\n            color: darkMode ? '#d1d5db' : '#374151',\n            marginBottom: '0.5rem'\n          }}>\n            API URL\n          </label>\n          <input\n            type=\"text\"\n            value={apiUrl}\n            onChange={(e) => setApiUrl(e.target.value)}\n            style={inputStyle}\n          />\n        </div>\n        \n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>\n          <div>\n            <label style={{\n              display: 'block',\n              fontSize: '0.875rem',\n              fontWeight: '600',\n              color: darkMode ? '#d1d5db' : '#374151',\n              marginBottom: '0.5rem'\n            }}>\n              Username\n            </label>\n            <input\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              style={inputStyle}\n            />\n          </div>\n          <div>\n            <label style={{\n              display: 'block',\n              fontSize: '0.875rem',\n              fontWeight: '600',\n              color: darkMode ? '#d1d5db' : '#374151',\n              marginBottom: '0.5rem'\n            }}>\n              Password\n            </label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              style={inputStyle}\n            />\n          </div>\n        </div>\n        \n        <button\n          onClick={runAllTests}\n          disabled={isLoading}\n          style={buttonStyle}\n        >\n          {isLoading ? 'Running Tests...' : 'Run API Tests'}\n        </button>\n      </div>\n\n      {/* Test Results */}\n      <div style={cardStyle}>\n        <h2 style={{\n          fontSize: '1.25rem',\n          fontWeight: '600',\n          color: darkMode ? 'white' : '#1f2937',\n          marginBottom: '1rem'\n        }}>\n          Test Results\n        </h2>\n        \n        {Object.keys(testResults).length === 0 ? (\n          <p style={{ color: darkMode ? '#9ca3af' : '#6b7280' }}>\n            No tests run yet. Click \"Run API Tests\" to start.\n          </p>\n        ) : (\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n            {Object.entries(testResults).map(([testName, result]) => (\n              <div key={testName} style={{\n                padding: '1rem',\n                background: darkMode ? '#374151' : '#f9fafb',\n                borderRadius: '8px',\n                border: `1px solid ${darkMode ? '#4b5563' : '#e5e7eb'}`\n              }}>\n                <div style={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center',\n                  marginBottom: '0.5rem'\n                }}>\n                  <h3 style={{\n                    fontSize: '1rem',\n                    fontWeight: '600',\n                    color: darkMode ? 'white' : '#1f2937',\n                    margin: 0,\n                    textTransform: 'capitalize'\n                  }}>\n                    {testName} Test\n                  </h3>\n                  {getStatusBadge(result.status)}\n                </div>\n                \n                {result.status === 'success' && (\n                  <div style={{\n                    background: darkMode ? '#1f2937' : 'white',\n                    padding: '0.75rem',\n                    borderRadius: '6px',\n                    fontSize: '0.875rem',\n                    color: darkMode ? '#d1d5db' : '#374151',\n                    fontFamily: 'monospace',\n                    overflowX: 'auto'\n                  }}>\n                    <pre style={{ margin: 0 }}>\n                      {JSON.stringify(result.data?.data || result.data, null, 2)}\n                    </pre>\n                  </div>\n                )}\n                \n                {result.status === 'error' && (\n                  <div style={{\n                    background: '#fee2e220',\n                    padding: '0.75rem',\n                    borderRadius: '6px',\n                    fontSize: '0.875rem',\n                    color: '#dc2626',\n                    fontFamily: 'monospace'\n                  }}>\n                    {result.error}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* CORS Troubleshooting */}\n      <div style={cardStyle}>\n        <h2 style={{\n          fontSize: '1.25rem',\n          fontWeight: '600',\n          color: darkMode ? 'white' : '#1f2937',\n          marginBottom: '1rem'\n        }}>\n          CORS Troubleshooting\n        </h2>\n        \n        <div style={{\n          background: darkMode ? '#374151' : '#f9fafb',\n          padding: '1rem',\n          borderRadius: '8px',\n          fontSize: '0.875rem',\n          color: darkMode ? '#d1d5db' : '#374151',\n          fontFamily: 'monospace',\n          marginBottom: '1rem'\n        }}>\n          <p style={{ margin: '0 0 0.5rem 0' }}>Add this to your .NET backend:</p>\n          <pre style={{ margin: 0, overflowX: 'auto' }}>\n{`// In Program.cs\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"ReactAppPolicy\",\n        builder =>\n        {\n            builder.WithOrigins(\"http://localhost:3000\")\n                   .AllowAnyHeader()\n                   .AllowAnyMethod();\n        });\n});\n\n// In middleware pipeline\napp.UseCors(\"ReactAppPolicy\");`}\n          </pre>\n        </div>\n        \n        <p style={{ color: darkMode ? '#9ca3af' : '#6b7280', fontSize: '0.875rem' }}>\n          If you see CORS errors in the console, make sure your .NET backend has CORS enabled for your React app's URL.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ApiTestPage;"],"names":["_ref","darkMode","testResults","setTestResults","useState","isLoading","setIsLoading","username","setUsername","password","setPassword","apiUrl","setApiUrl","config","api","baseUrl","runTest","async","testName","testFunction","prev","status","data","error","result","toString","testLogin","axios","post","testGetLeads","get","testCreateLead","contactPerson","companyName","email","phone","industry","leadSource","estimatedValue","priority","cardStyle","background","borderRadius","boxShadow","border","padding","marginBottom","inputStyle","width","color","fontSize","buttonStyle","cursor","fontWeight","getStatusBadge","styles","running","bg","text","success","style","_jsx","children","_jsxs","display","type","value","onChange","e","target","gridTemplateColumns","gap","onClick","Promise","all","showToast","console","disabled","Object","keys","length","flexDirection","entries","map","_ref2","_result$data","justifyContent","alignItems","margin","textTransform","fontFamily","overflowX","JSON","stringify"],"sourceRoot":""}